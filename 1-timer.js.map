{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\n\nconst imputEl = document.getElementById('datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nlet userSelectedDate = null;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  \n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDates[0] < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      iziToast.success({\n        title: 'OK',\n        message: 'Valid date selected',\n      });\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(imputEl, options);\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerInterface({ days, hours, minutes, seconds }) {\n  document.querySelector('[data-days]').textContent = addLeadingZero(days);\n  document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n  document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n  document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n}\nlet timerInterval = null;\n\nstartBtn.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  imputEl.disabled = true;\n  startBtn.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const currentTime = new Date();\n    const timeDifference = userSelectedDate - currentTime;\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      updateTimerInterface({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      imputEl.disabled = false;\n      return;\n    }\n\n    const timeComponents = convertMs(timeDifference);\n    updateTimerInterface(timeComponents);\n  }, 1000);\n});"],"names":["imputEl","startBtn","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","updateTimerInterface","timerInterval","timeDifference","timeComponents"],"mappings":"+IAGA,MAAMA,EAAU,SAAS,eAAe,iBAAiB,EACnDC,EAAW,SAAS,cAAc,cAAc,EACtD,IAAIC,EAAmB,KAEvBD,EAAS,SAAW,GAEpB,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCA,EAAc,CAAC,EAAI,IAAI,MACzBE,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDL,EAAS,SAAW,KAEpBC,EAAmBG,EACnBC,EAAS,QAAQ,CACf,MAAO,KACP,QAAS,qBACjB,CAAO,EACDL,EAAS,SAAW,GAEvB,CACH,EAEAM,EAAUP,EAASG,CAAO,EAC1B,SAASK,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAqB,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC/D,SAAS,cAAc,aAAa,EAAE,YAAcC,EAAeJ,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcI,EAAeH,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAeF,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcE,EAAeD,CAAO,CAC/E,CACA,IAAII,EAAgB,KAEpBhB,EAAS,iBAAiB,QAAS,IAAM,CAClCC,IAELF,EAAQ,SAAW,GACnBC,EAAS,SAAW,GAEpBgB,EAAgB,YAAY,IAAM,CAEhC,MAAMC,EAAiBhB,EADH,IAAI,KAGxB,GAAIgB,GAAkB,EAAG,CACvB,cAAcD,CAAa,EAC3BD,EAAqB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAClEhB,EAAQ,SAAW,GACnB,MACD,CAED,MAAMmB,EAAiBX,EAAUU,CAAc,EAC/CF,EAAqBG,CAAc,CACpC,EAAE,GAAI,EACT,CAAC"}